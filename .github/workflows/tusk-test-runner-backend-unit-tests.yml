name: Tusk Test Runner - Backend unit tests

# Required for Tusk
on:
  workflow_dispatch:
    inputs:
      runId:
        description: "Tusk Run ID"
        required: true
      tuskUrl:
        description: "Tusk server URL"
        required: true
      commitSha:
        description: "Commit SHA to checkout"
        required: true

jobs:
  test-action:
    name: Tusk Test Runner
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        id: checkout
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.inputs.commitSha }} # Required for Tusk to access files for the commit being tested

      # Adapt this step to your project's specific setup.
      # You may also add more setup steps before the 'Start runner' step if necessary.
      - name: Install dependencies
        run: pip install -r requirements.txt

      - name: Start runner
        id: test-action
        uses: Use-Tusk/test-runner@v1
        with:
          # Required for the test runner, do not remove this input
          runId: ${{ github.event.inputs.runId }}

          # Required for the test runner, do not remove this input
          tuskUrl: ${{ github.event.inputs.tuskUrl }}

          # Required for the test runner, do not remove this input
          commitSha: ${{ github.event.inputs.commitSha }}

          # Your Tusk auth token. It is recommended to add it to your repo's secrets.
          # Please adapt the secret name accordingly if you have named it differently.
          authToken: ${{ secrets.TUSK_AUTH_TOKEN }}

          # The directory containing your service code. If you have a monorepo containing multiple
          # services, create a separate workflow for each service with a different (and non-overlapping) appDir.
          # appDir should be relative to the root of the repo.
          # Remove this input if this doesn't apply to your repo (i.e., it is a single-service repo).
          appDir: "backend"

          # You may specify the test framework if it is a different one
          testFramework: "pytest"

          # Test file regex to match all test files in the service
          # This is relative to the root of the repo (i.e., the appDir should be included in it, if applicable).
          testFileRegex: "^tests/.*(test_.*|.*_test).py$"

          # The script to run to lint the code (adapt accordingly).
          # {{file}} placeholder is required and will be replaced by Tusk with the file being linted.
          # If you don't have a lint command, you can remove this input.
          lintScript: black {{file}}

          # The script to run to test the code (adapt accordingly). Required for the test runner.
          # {{file}} placeholder is required and will be replaced by Tusk with the file being tested.
          testScript: pytest {{file}}
